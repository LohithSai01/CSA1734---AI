import itertools

# Sample distance matrix for 4 cities
# dist[i][j] represents the distance from city i to city j
dist = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

def travelling_salesman_problem(dist):
    # Number of cities
    n = len(dist)
    
    # Generate all permutations of cities except the starting city (0)
    permutations = itertools.permutations(range(1, n))
    
    # Initialize the minimum path and its cost
    min_path = []
    min_cost = float('inf')
    
    # Check each permutation
    for perm in permutations:
        # Start with the starting city (0)
        current_path = [0] + list(perm) + [0]
        current_cost = sum(dist[current_path[i]][current_path[i+1]] for i in range(n))
        
        # Update the minimum path and cost if found a shorter path
        if current_cost < min_cost:
            min_path = current_path
            min_cost = current_cost
    
    return min_path, min_cost

# Solve the TSP
path, cost = travelling_salesman_problem(dist)
print(f"Minimum cost path: {path}, Cost: {cost}")
